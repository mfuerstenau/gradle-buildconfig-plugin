import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal ()
    }

    dependencies {
        classpath 'de.fuerstenau:BuildConfigPlugin:1.1.9'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.16.0"
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

group = 'de.fuerstenau'
version = '1.1.9'

repositories {
    mavenCentral()
}


task createClasspathManifest {
    def outputDir = file("${buildDir}/${name}")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join ("\n")
    }
}

dependencies {
    implementation gradleApi()
    testImplementation group: 'junit', name: 'junit', version: '4.10'
    testImplementation ('org.spockframework:spock-core:2.1-M2-groovy-3.0') {
        exclude module : 'groovy-all'
    }
    testImplementation gradleTestKit()
    testRuntimeOnly files(createClasspathManifest)
}


task copyBintrayTemplate (type: Copy) {
    from "${projectDir}/templates"
    into "${project.buildDir}"
    include 'bintray.json.template'
    rename { file -> 'bintray.json' }
    expand (version: version, releasedate: releaseDate (), mavenRepositoryPath: mavenRepositoryPath ())
}

task copyPOMTemplate (type: Copy) {
    from "${projectDir}/templates"
    into "${buildDir}/libs"
    include 'pom.xml.template'
    rename { file -> "${project.name}-${project.version}.pom" }
    expand (version: version)
}

assemble.dependsOn copyPOMTemplate

pluginBundle {
    // These settings are set for the whole plugin bundle
    website = 'https://github.com/mfuerstenau/gradle-buildconfig-plugin'
    vcsUrl = 'https://github.com/mfuerstenau/gradle-buildconfig-plugin'

    plugins {

        // another plugin
        buildConfigPlugin {
            id = 'de.fuerstenau.buildconfig'
            displayName = 'Build config plugin for Gradle Java and Groovy projects'
            description = 'A build config is a generated class holding constants set by the build script. It can be accessed within the Java or Groovy application, thus providing a way to transport information about version, project name or debug flags or a lot more info that otherwise will not be available or has to to be transported via complicated workarounds.'
            tags = ['java', 'buildconfig', 'static', 'version', 'generated', 'sourceset', 'groovy', 'constants']
            version = project.version
        }
    }
}

gradlePlugin {
    plugins {
        buildConfigPlugin {
            id = 'de.fuerstenau.buildconfig'
            displayName = 'Build config plugin for Gradle Java and Groovy projects'
            description = 'A build config is a generated class holding constants set by the build script. It can be accessed within the Java or Groovy application, thus providing a way to transport information about version, project name or debug flags or a lot more info that otherwise will not be available or has to to be transported via complicated workarounds.'
            implementationClass = 'de.fuerstenau.gradle.buildconfig.BuildConfigPlugin'
        }
    }
}
test {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

def mavenRepositoryPath ()
{
   "gradle/plugin/de/fuerstenau/BuildConfigPlugin/${version}/"
}

def releaseDate ()
{
    new SimpleDateFormat("yyyy-MM-dd").format (new Date())
}